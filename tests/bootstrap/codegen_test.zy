module tests.bootstrap.codegen

import bootstrap.codegen.{generate, Opcode, Instruction}
import bootstrap.parser.{Node, NodeKind}
import std.testing.{assert_eq, assert_true}

@test
fn test_generate_return() {
    // Create a simple AST for: fn main() -> int { return 42 }
    let ast = Node{
        kind: NodeKind.MODULE,
        children: [
            Node{
                kind: NodeKind.FUNCTION,
                children: [
                    Node{
                        kind: NodeKind.RETURN_STMT,
                        children: [
                            Node{
                                kind: NodeKind.LITERAL,
                                value: 42
                            }
                        ]
                    }
                ]
            }
        ]
    }
    
    let bytecode = generate(ast)?
    let instructions = deserialize(bytecode)
    
    assert_eq(instructions.length, 2)
    assert_eq(instructions[0].opcode, Opcode.LOAD_CONST)
    assert_eq(instructions[1].opcode, Opcode.RETURN)
}