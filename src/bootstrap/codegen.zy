module bootstrap.codegen

import bootstrap.parser.{Node, NodeKind}
import core.types.Result

type Opcode {
    LOAD_CONST
    LOAD_VAR
    STORE_VAR
    CALL
    RETURN
    ADD
    SUB
    MUL
    DIV
}

type Instruction {
    opcode: Opcode
    operand: int
}

type CodeGen {
    instructions: []Instruction
    constants: []Value
    locals: map<string, int>
    errors: []string
}

fn generate(ast: Node) -> Result<[]byte> {
    let gen = CodeGen{
        instructions: [],
        constants: [],
        locals: {},
        errors: []
    }
    
    generate_node(gen, ast)?
    
    if gen.errors.length > 0 {
        return Err(join(gen.errors, "\n"))
    }
    
    return Ok(serialize(gen.instructions))
}

fn generate_node(gen: &mut CodeGen, node: Node) -> Result<()> {
    match node.kind {
        NodeKind.MODULE => {
            for child in node.children {
                generate_node(gen, child)?
            }
        },
        NodeKind.FUNCTION => generate_function(gen, node)?,
        NodeKind.RETURN_STMT => {
            generate_expr(gen, node.children[0])?
            emit(gen, Opcode.RETURN, 0)
        },
        _ => gen.errors.push(f"Unsupported node type: {node.kind}")
    }
    
    Ok(())
}