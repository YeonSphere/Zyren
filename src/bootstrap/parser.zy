module bootstrap.parser

import bootstrap.lexer.{Token, TokenKind}

type NodeKind {
    MODULE
    FUNCTION
    TYPE_DECL
    LET_STMT
    RETURN_STMT
    CALL_EXPR
    BINARY_EXPR
    IDENTIFIER
    LITERAL
}

type Node {
    kind: NodeKind
    tokens: []Token
    children: []Node
}

type Parser {
    tokens: []Token
    current: int
    errors: []string
}

fn parse(tokens: []Token) -> Result<Node> {
    let parser = Parser{
        tokens: tokens,
        current: 0,
        errors: []
    }
    
    let module_node = Node{
        kind: NodeKind.MODULE,
        tokens: [],
        children: []
    }
    
    while !is_at_end(parser) {
        match peek(parser).kind {
            TokenKind.IMPORT => module_node.children.push(parse_import(parser)?),
            TokenKind.FN => module_node.children.push(parse_function(parser)?),
            TokenKind.TYPE => module_node.children.push(parse_type(parser)?),
            _ => return Err("Expected top-level declaration")
        }
    }
    
    if parser.errors.length > 0 {
        return Err(join(parser.errors, "\n"))
    }
    
    return Ok(module_node)
}