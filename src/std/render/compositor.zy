type Layer {
    id: string
    content: Surface
    bounds: Rect
    opacity: float
    transform: Matrix4x4
    blend_mode: BlendMode
}

type Compositor {
    layers: Vector<Layer>
    root_surface: Surface
    damage_region: Region
}

fn compose_frame(compositor: &Compositor) -> Surface {
    // Efficient layer composition with GPU acceleration
    let frame = create_surface(compositor.root_surface.width, 
                             compositor.root_surface.height,
                             PixelFormat.RGBA8)
    
    for layer in compositor.layers {
        if intersects(layer.bounds, compositor.damage_region) {
            blend_layer(frame, layer)
        }
    }
    
    frame
}