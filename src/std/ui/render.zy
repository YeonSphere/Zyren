type RenderCommand {
    DRAW_RECT
    DRAW_TEXT
    DRAW_IMAGE
    CLIP
    TRANSFORM
}

type RenderContext {
    commands: []RenderCommand
    clip_stack: []Rect
    transform_stack: []Matrix
}

fn render(element: Element, context: &mut RenderContext) {
    // Apply transformations
    context.transform_stack.push(calculate_transform(element))
    
    // Set clipping region
    let bounds = calculate_bounds(element)
    context.clip_stack.push(bounds)
    
    // Render background
    if let bg = element.background {
        context.commands.push(RenderCommand.DRAW_RECT{
            bounds: bounds,
            fill: bg.color,
            radius: bg.radius
        })
    }
    
    // Render content
    match element.content {
        TextContent(text) => render_text(text, bounds, context),
        ImageContent(image) => render_image(image, bounds, context),
        Custom(renderer) => renderer(bounds, context)
    }
    
    // Render children
    for child in element.children {
        render(child, context)
    }
    
    // Restore state
    context.clip_stack.pop()
    context.transform_stack.pop()
}