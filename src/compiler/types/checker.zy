module compiler.types.checker

import compiler.ast.nodes.{Node, NodeKind}
import core.types.{Result, Option}

type Type {
	VOID
	INT
	FLOAT
	STRING
	BOOL
	FUNCTION
}

type TypeInfo {
	type: Type
	return_type: Option<Type>  // For functions
}

type TypeChecker {
	scopes: []map<string, TypeInfo>
	current_function: Option<TypeInfo>
	errors: []string
}

fn new_type_checker() -> TypeChecker {
	TypeChecker {
		scopes: [{}],  // Global scope
		current_function: None,
		errors: []
	}
}

fn check(node: Node) -> Result<Type> {
	let checker = new_type_checker()
	return checker.check_node(node)
}

fn check_node(self: &mut TypeChecker, node: Node) -> Result<Type> {
	match node.kind {
		NodeKind.MODULE => self.check_module(node),
		NodeKind.FUNCTION => self.check_function(node),
		NodeKind.BLOCK => self.check_block(node),
		NodeKind.RETURN_STMT => self.check_return(node),
		NodeKind.CALL_EXPR => self.check_call(node),
		NodeKind.STRING_LITERAL => Ok(Type.STRING),
		NodeKind.IDENTIFIER => self.check_identifier(node),
		_ => Err(f"Unknown node type in type checker: {node.kind}")
	}
}

fn check_module(self: &mut TypeChecker, node: Node) -> Result<Type> {
	for child in node.children {
		self.check_node(child)?
	}
	Ok(Type.VOID)
}

fn check_function(self: &mut TypeChecker, node: Node) -> Result<Type> {
	let name = node.value
	let return_type = Type.VOID  // Default return type, can be enhanced with type annotations
	
	let func_type = TypeInfo {
		type: Type.FUNCTION,
		return_type: Some(return_type)
	}
	
	self.current_function = Some(func_type)
	self.add_to_scope(name, func_type)
	
	// Create new scope for function body
	self.push_scope()
	
	// Check function body
	for child in node.children {
		self.check_node(child)?
	}
	
	self.pop_scope()
	self.current_function = None
	
	Ok(Type.VOID)
}

fn check_return(self: &mut TypeChecker, node: Node) -> Result<Type> {
	if node.children.length > 0 {
		let expr_type = self.check_node(node.children[0])?
		
		match self.current_function {
			Some(func_type) => {
				if func_type.return_type != Some(expr_type) {
					return Err(f"Return type mismatch: expected {func_type.return_type}, got {expr_type}")
				}
			},
			None => return Err("Return statement outside function")
		}
	}
	
	Ok(Type.VOID)
}

fn check_call(self: &mut TypeChecker, node: Node) -> Result<Type> {
	let func_name = node.value
	match self.lookup(func_name) {
		Some(func_type) => {
			if func_type.type != Type.FUNCTION {
				return Err(f"{func_name} is not a function")
			}
			
			// Check arguments (can be enhanced with parameter type checking)
			for arg in node.children {
				self.check_node(arg)?
			}
			
			Ok(func_type.return_type.unwrap_or(Type.VOID))
		},
		None => Err(f"Undefined function: {func_name}")
	}
}

fn check_identifier(self: &mut TypeChecker, node: Node) -> Result<Type> {
	match self.lookup(node.value) {
		Some(type_info) => Ok(type_info.type),
		None => Err(f"Undefined variable: {node.value}")
	}
}

// Scope management helpers
fn push_scope(self: &mut TypeChecker) {
	self.scopes.push({})
}

fn pop_scope(self: &mut TypeChecker) {
	self.scopes.pop()
}

fn add_to_scope(self: &mut TypeChecker, name: string, type_info: TypeInfo) {
	self.scopes[self.scopes.length - 1][name] = type_info
}

fn lookup(self: &TypeChecker, name: string) -> Option<TypeInfo> {
	for i in (0..self.scopes.length).reverse() {
		if type_info = self.scopes[i][name] {
			return Some(type_info)
		}
	}
	None
}