module runtime.vm

import core.types.{Result}

type Value {
    type: ValueType
    data: union {
        int_val: int
        float_val: float
        string_val: string
        bool_val: bool
    }
}

type ValueType {
    INT
    FLOAT
    STRING
    BOOL
    NULL
}

type VM {
    stack: []Value
    sp: int  // Stack pointer
    globals: map<string, Value>
    constants: []Value
}

fn new_vm(constants: []Value) -> VM {
    VM {
        stack: [Value; 256],  // Fixed stack size for now
        sp: 0,
        globals: {},
        constants: constants
    }
}

fn push(self: &mut VM, value: Value) -> Result<()> {
    if self.sp >= self.stack.length {
        return Err("Stack overflow")
    }
    self.stack[self.sp] = value
    self.sp += 1
    Ok(())
}

fn pop(self: &mut VM) -> Result<Value> {
    if self.sp <= 0 {
        return Err("Stack underflow")
    }
    self.sp -= 1
    Ok(self.stack[self.sp])
}

fn run(self: &mut VM, instructions: []byte) -> Result<Value> {
    let ip = 0  // Instruction pointer
    
    while ip < instructions.length {
        let opcode = instructions[ip]
        ip += 1
        
        match opcode {
            Opcode.LOAD_CONST => {
                let const_idx = instructions[ip]
                ip += 1
                self.push(self.constants[const_idx])?
            },
            Opcode.CALL => {
                let arg_count = instructions[ip]
                ip += 1
                self.execute_call(arg_count)?
            },
            Opcode.RETURN => {
                if self.sp > 0 {
                    return Ok(self.pop()?)
                }
                return Ok(Value{type: ValueType.NULL})
            },
            _ => return Err(f"Unknown opcode: {opcode}")
        }
    }
    
    Ok(Value{type: ValueType.NULL})
}

fn execute_call(self: &mut VM, arg_count: int) -> Result<()> {
    // For now, just handle built-in print function
    let func = self.pop()?
    if func.type == ValueType.STRING && func.string_val == "print" {
        if arg_count != 1 {
            return Err("print expects 1 argument")
        }
        let arg = self.pop()?
        print(arg.string_val)
        self.push(Value{type: ValueType.NULL})?
    } else {
        return Err(f"Unknown function: {func.string_val}")
    }
    Ok(())
}
